plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id "org.flywaydb.flyway" version "9.8.1"
	id "io.freefair.lombok" version "8.4"
	id "org.sonarqube" version "4.4.1.3373"
	id 'jacoco'
}

group = 'com.fiap.techchallenge.fourlanches'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

sonar {
	properties {
		property "sonar.projectKey", "fiap-four-lanches_fourlanches.order.app"
		property "sonar.organization", "fiap-four-lanches"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/*.xml"
		property "sonar.java.coveragePlugin", "jacoco"
  }
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	implementation 'org.postgresql:postgresql'

	runtimeOnly 'com.h2database:h2'
}

flyway {
	url = 'jdbc:postgresql://localhost:5432/fourlanches'
	user = System.getenv('DATABASE_USERNAME')
	password = System.getenv('DATABASE_PASSWORD')
	cleanDisabled = false
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report

    reports {
        xml.required = true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com/fiap/**/application/dto/**.*",
					"com/fiap/**/SpringJpaConfig*",
					"com/fiap/**/RabbitMQConfig*",
					"com/fiap/**/FailPublishToQueueException*",
					"com/fiap/**/*Exception*",
					"com/fiap/**/OrderStatusConsumer*",
					"com/fiap/**/InternalServerError*",
					"com/fiap/**/FourLanchesApplication*",
					"com/fiap/**/HeaderConstant*",
					"com/fiap/**/KitchenProductionQueueMessageDTO*",
					"com/fiap/**/OrderControllerAdvisor*",
					"com/fiap/**/OrderStatusQueueMessageDTO*",
					"com/fiap/**/PaymentQueueMessageDTO*",
			])
		}))
	}
}
